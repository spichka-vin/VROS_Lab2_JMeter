<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="openPost" elementType="Argument">
            <stringProp name="Argument.name">openPost</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="postNum" elementType="Argument">
            <stringProp name="Argument.name">postNum</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="choiceFirstStep" elementType="Argument">
            <stringProp name="Argument.name">choiceFirstStep</stringProp>
            <stringProp name="Argument.value">&quot;home&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="openPage" elementType="Argument">
            <stringProp name="Argument.name">openPage</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="openPost" elementType="Argument">
            <stringProp name="Argument.name">openPost</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Main Script" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String[] query = new String[]{
	&quot;2021/01/01&quot;, 
	&quot;2020/01/01&quot;, 
	&quot;2019/01/01&quot;, 
	&quot;2018/01/01&quot;, 
	&quot;2017/01/01&quot;, 
	&quot;2016/01/01&quot;, 
	&quot;2015/01/01&quot;, 
	&quot;2014/01/01&quot;, 
	&quot;2013/01/01&quot;, 
	&quot;2012/01/01&quot;
	};
bsh.shared.strList = query;</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Open 50 times" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">50</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="home" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">blog/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="RandomTimer.range">15.0</stringProp>
                <stringProp name="ConstantTimer.delay">10</stringProp>
                <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Anonymous Script" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1000</stringProp>
            </LoopController>
            <hashTree>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="choiceOption" enabled="true">
                <stringProp name="variableName">choiceFirstStep</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <stringProp name="minimumValue">1</stringProp>
                <stringProp name="maximumValue">6</stringProp>
                <stringProp name="randomSeed">42</stringProp>
                <boolProp name="perThread">true</boolProp>
              </RandomVariableConfig>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Home" enabled="true">
                <stringProp name="IfController.condition">${choiceFirstStep}==&quot;1&quot;;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="home" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blog/</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">15.0</stringProp>
                    <stringProp name="ConstantTimer.delay">10</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPage" enabled="true">
                  <stringProp name="variableName">openPage</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="maximumValue">1</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPage" enabled="true">
                  <stringProp name="IfController.condition">${openPage}==&quot;1&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="pageNum" enabled="true">
                    <stringProp name="maximumValue">5</stringProp>
                    <stringProp name="minimumValue">1</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <boolProp name="perThread">true</boolProp>
                    <stringProp name="randomSeed"></stringProp>
                    <stringProp name="variableName">pageNum</stringProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RandOrFirstPost" enabled="true">
                    <stringProp name="variableName">randOrFirst</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RandPost" enabled="true">
                    <stringProp name="IfController.condition">${randOrFirst}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                      <stringProp name="variableName">postNum</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">1</stringProp>
                      <stringProp name="maximumValue">10</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FirstPost" enabled="true">
                    <stringProp name="IfController.condition">${randOrFirst}==&quot;0&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                      <stringProp name="variableName">postNum</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">1</stringProp>
                      <stringProp name="maximumValue">1</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PageRand" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blog/?page=${pageNum}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">postLink</stringProp>
                      <stringProp name="HtmlExtractor.expr">h2 &gt; a</stringProp>
                      <stringProp name="HtmlExtractor.attribute">href</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPost" enabled="true">
                    <stringProp name="variableName">openPost</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPost" enabled="true">
                    <stringProp name="IfController.condition">${openPost}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="openPost" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">15.0</stringProp>
                        <stringProp name="ConstantTimer.delay">10</stringProp>
                        <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewState" enabled="true">
                        <stringProp name="HtmlExtractor.refname">viewState</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATE]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewStateGenerator" enabled="true">
                        <stringProp name="HtmlExtractor.refname">viewStateGenerator</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATEGENERATOR]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector EventValidation" enabled="true">
                        <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__EVENTVALIDATION]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="comment" enabled="true">
                      <stringProp name="variableName">comment</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">0</stringProp>
                      <stringProp name="maximumValue">1</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Comment" enabled="true">
                      <stringProp name="IfController.condition">${comment}==&quot;1&quot;;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateComment" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${viewStateGenerator}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                            </elementProp>
                            <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${viewState}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                            </elementProp>
                            <elementProp name="txtName" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtName</stringProp>
                            </elementProp>
                            <elementProp name="txtEmail" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtEmail</stringProp>
                            </elementProp>
                            <elementProp name="txtContent" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtContent</stringProp>
                            </elementProp>
                            <elementProp name="crateCommentName" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">Сохранить комментарий</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">crateCommentName</stringProp>
                            </elementProp>
                            <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${eventValidation}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                              <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                            <elementProp name="Origin" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">http://localhost</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RandomDate" enabled="true">
                <stringProp name="IfController.condition">${choiceFirstStep}==&quot;2&quot;;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="randomDate" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blog/${__RandomDate(yyyy/MM/dd, 2021/01/01,2030/01/01,)}/default</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">83.0</stringProp>
                    <stringProp name="ConstantTimer.delay">40.5</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 8321 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPage" enabled="true">
                  <stringProp name="variableName">openPage</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="maximumValue">1</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPage" enabled="true">
                  <stringProp name="IfController.condition">${openPage}==&quot;1&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="pageNum" enabled="true">
                    <stringProp name="maximumValue">5</stringProp>
                    <stringProp name="minimumValue">1</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <boolProp name="perThread">true</boolProp>
                    <stringProp name="randomSeed"></stringProp>
                    <stringProp name="variableName">pageNum</stringProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RandOrFirstPost" enabled="true">
                    <stringProp name="variableName">randOrFirst</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RandPost" enabled="true">
                    <stringProp name="IfController.condition">${randOrFirst}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                      <stringProp name="variableName">postNum</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">1</stringProp>
                      <stringProp name="maximumValue">10</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FirstPost" enabled="true">
                    <stringProp name="IfController.condition">${randOrFirst}==&quot;0&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                      <stringProp name="variableName">postNum</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">1</stringProp>
                      <stringProp name="maximumValue">1</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PageRand" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blog/?page=${pageNum}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">postLink</stringProp>
                      <stringProp name="HtmlExtractor.expr">h2 &gt; a</stringProp>
                      <stringProp name="HtmlExtractor.attribute">href</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPost" enabled="true">
                    <stringProp name="variableName">openPost</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPost" enabled="true">
                    <stringProp name="IfController.condition">${openPost}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="openPost" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">15.0</stringProp>
                        <stringProp name="ConstantTimer.delay">10</stringProp>
                        <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewState" enabled="true">
                        <stringProp name="HtmlExtractor.refname">viewState</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATE]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewStateGenerator" enabled="true">
                        <stringProp name="HtmlExtractor.refname">viewStateGenerator</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATEGENERATOR]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector EventValidation" enabled="true">
                        <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__EVENTVALIDATION]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="comment" enabled="true">
                      <stringProp name="variableName">comment</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">0</stringProp>
                      <stringProp name="maximumValue">1</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Comment" enabled="true">
                      <stringProp name="IfController.condition">${comment}==&quot;1&quot;;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateComment" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${viewStateGenerator}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                            </elementProp>
                            <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${viewState}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                            </elementProp>
                            <elementProp name="txtName" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtName</stringProp>
                            </elementProp>
                            <elementProp name="txtEmail" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtEmail</stringProp>
                            </elementProp>
                            <elementProp name="txtContent" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtContent</stringProp>
                            </elementProp>
                            <elementProp name="crateCommentName" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">Сохранить комментарий</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">crateCommentName</stringProp>
                            </elementProp>
                            <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${eventValidation}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                              <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                            <elementProp name="Origin" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">http://localhost</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="PredefinedDate" enabled="true">
                <stringProp name="IfController.condition">${choiceFirstStep}==&quot;3&quot;;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String[] strList = bsh.shared.strList;
Random random = new Random();
int i = random.nextInt(strList.length);
vars.put(&quot;randDate&quot;,strList[i]);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="predefinedDate" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blog//${randDate}/default</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">15.0</stringProp>
                    <stringProp name="ConstantTimer.delay">10</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPage" enabled="true">
                  <stringProp name="variableName">openPage</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="maximumValue">1</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPage" enabled="true">
                  <stringProp name="IfController.condition">${openPage}==&quot;1&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="pageNum" enabled="true">
                    <stringProp name="maximumValue">5</stringProp>
                    <stringProp name="minimumValue">1</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <boolProp name="perThread">true</boolProp>
                    <stringProp name="randomSeed"></stringProp>
                    <stringProp name="variableName">pageNum</stringProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RandOrFirstPost" enabled="true">
                    <stringProp name="variableName">randOrFirst</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RandPost" enabled="true">
                    <stringProp name="IfController.condition">${randOrFirst}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                      <stringProp name="variableName">postNum</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">1</stringProp>
                      <stringProp name="maximumValue">10</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                  </hashTree>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FirstPost" enabled="true">
                    <stringProp name="IfController.condition">${randOrFirst}==&quot;0&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                      <stringProp name="variableName">postNum</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">1</stringProp>
                      <stringProp name="maximumValue">1</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PageRand" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">blog/?page=${pageNum}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                      <stringProp name="HtmlExtractor.refname">postLink</stringProp>
                      <stringProp name="HtmlExtractor.expr">h2 &gt; a</stringProp>
                      <stringProp name="HtmlExtractor.attribute">href</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPost" enabled="true">
                    <stringProp name="variableName">openPost</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPost" enabled="true">
                    <stringProp name="IfController.condition">${openPost}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="openPost" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                        <collectionProp name="Arguments.arguments"/>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                      <stringProp name="HTTPSampler.method">GET</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                      <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                        <stringProp name="RandomTimer.range">15.0</stringProp>
                        <stringProp name="ConstantTimer.delay">10</stringProp>
                        <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                      </UniformRandomTimer>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewState" enabled="true">
                        <stringProp name="HtmlExtractor.refname">viewState</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATE]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewStateGenerator" enabled="true">
                        <stringProp name="HtmlExtractor.refname">viewStateGenerator</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATEGENERATOR]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                      <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector EventValidation" enabled="true">
                        <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
                        <stringProp name="HtmlExtractor.expr">input[name=__EVENTVALIDATION]</stringProp>
                        <stringProp name="HtmlExtractor.attribute">value</stringProp>
                        <stringProp name="HtmlExtractor.default"></stringProp>
                        <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                        <stringProp name="HtmlExtractor.match_number">1</stringProp>
                        <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                      </HtmlExtractor>
                      <hashTree/>
                    </hashTree>
                    <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="comment" enabled="true">
                      <stringProp name="variableName">comment</stringProp>
                      <stringProp name="outputFormat"></stringProp>
                      <stringProp name="minimumValue">0</stringProp>
                      <stringProp name="maximumValue">1</stringProp>
                      <stringProp name="randomSeed"></stringProp>
                      <boolProp name="perThread">false</boolProp>
                    </RandomVariableConfig>
                    <hashTree/>
                    <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Comment" enabled="true">
                      <stringProp name="IfController.condition">${comment}==&quot;1&quot;;</stringProp>
                      <boolProp name="IfController.evaluateAll">false</boolProp>
                    </IfController>
                    <hashTree>
                      <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateComment" enabled="true">
                        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                          <collectionProp name="Arguments.arguments">
                            <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${viewStateGenerator}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                            </elementProp>
                            <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${viewState}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                            </elementProp>
                            <elementProp name="txtName" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtName</stringProp>
                            </elementProp>
                            <elementProp name="txtEmail" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtEmail</stringProp>
                            </elementProp>
                            <elementProp name="txtContent" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">admin</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">txtContent</stringProp>
                            </elementProp>
                            <elementProp name="crateCommentName" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">Сохранить комментарий</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">crateCommentName</stringProp>
                            </elementProp>
                            <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                              <boolProp name="HTTPArgument.always_encode">true</boolProp>
                              <stringProp name="Argument.value">${eventValidation}</stringProp>
                              <stringProp name="Argument.metadata">=</stringProp>
                              <boolProp name="HTTPArgument.use_equals">true</boolProp>
                              <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                            </elementProp>
                          </collectionProp>
                        </elementProp>
                        <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                        <stringProp name="HTTPSampler.port"></stringProp>
                        <stringProp name="HTTPSampler.protocol">http</stringProp>
                        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                        <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                        <stringProp name="HTTPSampler.method">POST</stringProp>
                        <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                        <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                        <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                        <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                        <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                        <stringProp name="HTTPSampler.response_timeout"></stringProp>
                      </HTTPSamplerProxy>
                      <hashTree>
                        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                          <collectionProp name="HeaderManager.headers">
                            <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                              <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                              <stringProp name="Header.value">1</stringProp>
                            </elementProp>
                            <elementProp name="Origin" elementType="Header">
                              <stringProp name="Header.name">Origin</stringProp>
                              <stringProp name="Header.value">http://localhost</stringProp>
                            </elementProp>
                            <elementProp name="Content-Type" elementType="Header">
                              <stringProp name="Header.name">Content-Type</stringProp>
                              <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                            </elementProp>
                            <elementProp name="Accept" elementType="Header">
                              <stringProp name="Header.name">Accept</stringProp>
                              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                            </elementProp>
                          </collectionProp>
                        </HeaderManager>
                        <hashTree/>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Search" enabled="true">
                <stringProp name="IfController.condition">${choiceFirstStep}==&quot;4&quot;;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RandOrFirstPost" enabled="true">
                  <stringProp name="variableName">randOrFirst</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="maximumValue">1</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RandPost" enabled="true">
                  <stringProp name="IfController.condition">${randOrFirst}==&quot;1&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                    <stringProp name="variableName">postNum</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">1</stringProp>
                    <stringProp name="maximumValue">10</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FirstPost" enabled="true">
                  <stringProp name="IfController.condition">${randOrFirst}==&quot;0&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                    <stringProp name="variableName">postNum</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">1</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="search" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blog/search?q=${__RandomString(${__Random(10,100,)},abcdefghjklmnopqrstuvwxyz)}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">15.0</stringProp>
                    <stringProp name="ConstantTimer.delay">10</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                    <stringProp name="HtmlExtractor.refname">postLink</stringProp>
                    <stringProp name="HtmlExtractor.expr">h2 &gt; a</stringProp>
                    <stringProp name="HtmlExtractor.attribute">href</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPost" enabled="true">
                  <stringProp name="variableName">openPost</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="maximumValue">1</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPost" enabled="true">
                  <stringProp name="IfController.condition">${openPost}==&quot;1&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="openPost" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">15.0</stringProp>
                      <stringProp name="ConstantTimer.delay">10</stringProp>
                      <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewState" enabled="true">
                      <stringProp name="HtmlExtractor.refname">viewState</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATE]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewStateGenerator" enabled="true">
                      <stringProp name="HtmlExtractor.refname">viewStateGenerator</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATEGENERATOR]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector EventValidation" enabled="true">
                      <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=__EVENTVALIDATION]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="comment" enabled="true">
                    <stringProp name="variableName">comment</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Comment" enabled="true">
                    <stringProp name="IfController.condition">${comment}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateComment" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${viewStateGenerator}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                          </elementProp>
                          <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${viewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                          </elementProp>
                          <elementProp name="txtName" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">admin</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">txtName</stringProp>
                          </elementProp>
                          <elementProp name="txtEmail" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">admin</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">txtEmail</stringProp>
                          </elementProp>
                          <elementProp name="txtContent" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">admin</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">txtContent</stringProp>
                          </elementProp>
                          <elementProp name="crateCommentName" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">Сохранить комментарий</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">crateCommentName</stringProp>
                          </elementProp>
                          <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${eventValidation}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Origin" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://localhost</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="LargeCalendar" enabled="true">
                <stringProp name="IfController.condition">${choiceFirstStep}==&quot;5&quot;;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="RandOrFirstPost" enabled="true">
                  <stringProp name="variableName">randOrFirst</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="maximumValue">1</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="RandPost" enabled="true">
                  <stringProp name="IfController.condition">${randOrFirst}==&quot;1&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                    <stringProp name="variableName">postNum</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">1</stringProp>
                    <stringProp name="maximumValue">10</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="FirstPost" enabled="true">
                  <stringProp name="IfController.condition">${randOrFirst}==&quot;0&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="postNum" enabled="true">
                    <stringProp name="variableName">postNum</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">1</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="calendar" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blog/calendar/default.aspx</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">187.0</stringProp>
                    <stringProp name="ConstantTimer.delay">93.5</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 18713 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
                    <stringProp name="HtmlExtractor.refname">postLink</stringProp>
                    <stringProp name="HtmlExtractor.expr">h2 &gt; a</stringProp>
                    <stringProp name="HtmlExtractor.attribute">href</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="HtmlExtractor.match_number">1</stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="openPost" enabled="true">
                  <stringProp name="variableName">openPost</stringProp>
                  <stringProp name="outputFormat"></stringProp>
                  <stringProp name="minimumValue">0</stringProp>
                  <stringProp name="maximumValue">1</stringProp>
                  <stringProp name="randomSeed"></stringProp>
                  <boolProp name="perThread">false</boolProp>
                </RandomVariableConfig>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="OpenPost" enabled="true">
                  <stringProp name="IfController.condition">${openPost}==&quot;1&quot;;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="openPost" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                          <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                          <stringProp name="Header.value">1</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                      <stringProp name="RandomTimer.range">15.0</stringProp>
                      <stringProp name="ConstantTimer.delay">10</stringProp>
                      <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                    </UniformRandomTimer>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewState" enabled="true">
                      <stringProp name="HtmlExtractor.refname">viewState</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATE]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector ViewStateGenerator" enabled="true">
                      <stringProp name="HtmlExtractor.refname">viewStateGenerator</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=__VIEWSTATEGENERATOR]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                    <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector EventValidation" enabled="true">
                      <stringProp name="HtmlExtractor.refname">eventValidation</stringProp>
                      <stringProp name="HtmlExtractor.expr">input[name=__EVENTVALIDATION]</stringProp>
                      <stringProp name="HtmlExtractor.attribute">value</stringProp>
                      <stringProp name="HtmlExtractor.default"></stringProp>
                      <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                      <stringProp name="HtmlExtractor.match_number">1</stringProp>
                      <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                    </HtmlExtractor>
                    <hashTree/>
                  </hashTree>
                  <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="comment" enabled="true">
                    <stringProp name="variableName">comment</stringProp>
                    <stringProp name="outputFormat"></stringProp>
                    <stringProp name="minimumValue">0</stringProp>
                    <stringProp name="maximumValue">1</stringProp>
                    <stringProp name="randomSeed"></stringProp>
                    <boolProp name="perThread">false</boolProp>
                  </RandomVariableConfig>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Comment" enabled="true">
                    <stringProp name="IfController.condition">${comment}==&quot;1&quot;;</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                  </IfController>
                  <hashTree>
                    <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateComment" enabled="true">
                      <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                        <collectionProp name="Arguments.arguments">
                          <elementProp name="__VIEWSTATEGENERATOR" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${viewStateGenerator}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">__VIEWSTATEGENERATOR</stringProp>
                          </elementProp>
                          <elementProp name="__VIEWSTATE" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${viewState}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">__VIEWSTATE</stringProp>
                          </elementProp>
                          <elementProp name="txtName" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">admin</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">txtName</stringProp>
                          </elementProp>
                          <elementProp name="txtEmail" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">admin</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">txtEmail</stringProp>
                          </elementProp>
                          <elementProp name="txtContent" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">admin</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">txtContent</stringProp>
                          </elementProp>
                          <elementProp name="crateCommentName" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">Сохранить комментарий</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">crateCommentName</stringProp>
                          </elementProp>
                          <elementProp name="__EVENTVALIDATION" elementType="HTTPArgument">
                            <boolProp name="HTTPArgument.always_encode">true</boolProp>
                            <stringProp name="Argument.value">${eventValidation}</stringProp>
                            <stringProp name="Argument.metadata">=</stringProp>
                            <boolProp name="HTTPArgument.use_equals">true</boolProp>
                            <stringProp name="Argument.name">__EVENTVALIDATION</stringProp>
                          </elementProp>
                        </collectionProp>
                      </elementProp>
                      <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                      <stringProp name="HTTPSampler.port"></stringProp>
                      <stringProp name="HTTPSampler.protocol">http</stringProp>
                      <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                      <stringProp name="HTTPSampler.path">${postLink}</stringProp>
                      <stringProp name="HTTPSampler.method">POST</stringProp>
                      <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                      <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                      <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                      <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                      <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                      <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                      <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    </HTTPSamplerProxy>
                    <hashTree>
                      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                        <collectionProp name="HeaderManager.headers">
                          <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                            <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                            <stringProp name="Header.value">1</stringProp>
                          </elementProp>
                          <elementProp name="Origin" elementType="Header">
                            <stringProp name="Header.name">Origin</stringProp>
                            <stringProp name="Header.value">http://localhost</stringProp>
                          </elementProp>
                          <elementProp name="Content-Type" elementType="Header">
                            <stringProp name="Header.name">Content-Type</stringProp>
                            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                          </elementProp>
                          <elementProp name="Accept" elementType="Header">
                            <stringProp name="Header.name">Accept</stringProp>
                            <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                          </elementProp>
                        </collectionProp>
                      </HeaderManager>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Contacts" enabled="true">
                <stringProp name="IfController.condition">${choiceFirstStep}==&quot;6&quot;;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contacts" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">blog/contact</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                        <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="RandomTimer.range">15.0</stringProp>
                    <stringProp name="ConstantTimer.delay">10</stringProp>
                    <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">task3sum.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">task3agg.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">task3tree.csv</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
